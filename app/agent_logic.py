"""
Rule-based mock AI agent for resource analysis.
Simulates the "Resource Analyst" step in the cybernetic control cycle.
"""

import copy
from app.models import SystemState


def run_mock_analysis(goal: str, current_state: SystemState) -> SystemState:
    """
    Simulate AI agent analysis based on the manager's goal.
    
    Args:
        goal: Strategic goal text from the manager
        current_state: Current system state
        
    Returns:
        Modified system state after agent's recommendations
    """
    # Create deep copy to avoid mutations
    new_state = copy.deepcopy(current_state)
    
    # Log agent "thoughts"
    print(f"\n{'='*60}")
    print(f"ü§ñ AI –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª—ñ–∑—É—î —Ü—ñ–ª—å: '{goal}'")
    print(f"{'='*60}")
    
    goal_lower = goal.lower()
    
    # Rule 1: Circular economy / recycling
    if "–ø–µ—Ä–µ—Ä–æ–±–∫" in goal_lower or "–µ–∫–æ–ª–æ–≥—ñ" in goal_lower or "circular" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –ü–µ—Ä–µ—Ä–æ–±–∫–∞, –ï–∫–æ–ª–æ–≥—ñ—è")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π, –û—Å–≤—ñ—Ç–Ω—ñ–π, –†–∏–∑–∏–∫–æ–≤–∏–π —Ä–µ—Å—É—Ä—Å–∏")
        
        for resource in new_state.resources:
            if resource.type.value == "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π":
                resource.value = min(100, resource.value + 20)
            elif resource.type.value == "–û—Å–≤—ñ—Ç–Ω—ñ–π":
                resource.value = min(100, resource.value + 15)
            elif resource.type.value == "–†–∏–∑–∏–∫–æ–≤–∏–π":
                resource.value = min(100, resource.value + 10)
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π (+20), –û—Å–≤—ñ—Ç–Ω—ñ–π (+15), –†–∏–∑–∏–∫–æ–≤–∏–π (+10)")
    
    # Rule 2: Customer / service focus
    elif "–∫–ª—ñ—î–Ω—Ç" in goal_lower or "—Å–µ—Ä–≤—ñ—Å" in goal_lower or "–∫–ª—ñ—î–Ω—Ç—Å—å–∫" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –ö–ª—ñ—î–Ω—Ç, –°–µ—Ä–≤—ñ—Å")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π, –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π, –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏")
        
        for resource in new_state.resources:
            if resource.type.value == "–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π":
                resource.value = min(100, resource.value + 15)
            elif resource.type.value == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π":
                resource.value = min(100, resource.value + 10)
            elif resource.type.value == "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π":
                resource.value = min(100, resource.value + 10)
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π (+15), –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π (+10), –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π (+10)")
    
    # Rule 3: Innovation / digital transformation
    elif "—ñ–Ω–Ω–æ–≤–∞—Ü" in goal_lower or "—Ü–∏—Ñ—Ä–æ–≤" in goal_lower or "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –Ü–Ω–Ω–æ–≤–∞—Ü—ñ—è, –¶–∏—Ñ—Ä–æ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π, –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π, –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ä–µ—Å—É—Ä—Å–∏")
        
        for resource in new_state.resources:
            if resource.type.value == "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π":
                resource.value = min(100, resource.value + 25)
            elif resource.type.value == "–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π":
                resource.value = min(100, resource.value + 15)
            elif resource.type.value == "–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π":
                resource.value = min(100, resource.value + 10)
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π (+25), –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π (+15), –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π (+10)")
    
    # Rule 4: Partnerships / ecosystem
    elif "–ø–∞—Ä—Ç–Ω–µ—Ä" in goal_lower or "–µ–∫–æ—Å–∏—Å—Ç–µ–º" in goal_lower or "—Å–ø—ñ–≤–ø—Ä–∞—Ü" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ, –ï–∫–æ—Å–∏—Å—Ç–µ–º–∞")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π, –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏")
        
        for resource in new_state.resources:
            if resource.type.value == "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π":
                resource.value = min(100, resource.value + 20)
            elif resource.type.value == "–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π":
                resource.value = min(100, resource.value + 10)
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π (+20), –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π (+10)")
    
    # Rule 5: Risk management / compliance
    elif "—Ä–∏–∑–∏–∫" in goal_lower or "–±–µ–∑–ø–µ–∫–∞" in goal_lower or "–∫–æ–º–ø–ª–∞—î–Ω—Å" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –†–∏–∑–∏–∫–∏, –ë–µ–∑–ø–µ–∫–∞")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –†–∏–∑–∏–∫–æ–≤–∏–π, –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏")
        
        for resource in new_state.resources:
            if resource.type.value == "–†–∏–∑–∏–∫–æ–≤–∏–π":
                resource.value = min(100, resource.value + 20)
            elif resource.type.value == "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π":
                resource.value = min(100, resource.value + 10)
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: –†–∏–∑–∏–∫–æ–≤–∏–π (+20), –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π (+10)")
    
    # Rule 6: Educational / knowledge
    elif "–æ—Å–≤—è—Ç" in goal_lower or "—Ç—Ä–µ–Ω" in goal_lower or "–∑–Ω–∞–Ω–Ω" in goal_lower or "–Ω–∞–≤—á–∞–Ω" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –û—Å–≤—ñ—Ç–∞, –¢—Ä–µ–Ω—ñ–Ω–≥–∏")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –û—Å–≤—ñ—Ç–Ω—ñ–π, –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏")
        
        for resource in new_state.resources:
            if resource.type.value == "–û—Å–≤—ñ—Ç–Ω—ñ–π":
                resource.value = min(100, resource.value + 20)
            elif resource.type.value == "–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π":
                resource.value = min(100, resource.value + 10)
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: –û—Å–≤—ñ—Ç–Ω—ñ–π (+20), –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π (+10)")
    
    # Default: general strategy
    else:
        print("üìä –¶—ñ–ª—å –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —á—ñ—Ç–∫–æ - –∑–∞—Å—Ç–æ—Å–æ–≤—É—é –±–∞–∑–æ–≤—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤")
        
        for resource in new_state.resources:
            if resource.type.value in ["–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π", "–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π", "–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π"]:
                resource.value = min(100, resource.value + 5)
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π (+5), –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π (+5), –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π (+5)")
    
    print(f"{'='*60}\n")
    
    return new_state



