"""
Rule-based mock AI agent for resource analysis (–ü—Ä–∞–≤–∏–ª–æ–≤–∏–π –ø—Å–µ–≤–¥–æ-–ê–Ü –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–µ—Å—É—Ä—Å—ñ–≤).
Simulates the "Resource Analyst" step in the cybernetic control cycle (–Ü–º—ñ—Ç—É—î –∫—Ä–æ–∫ "–ê–Ω–∞–ª—ñ–∑ —Ä–µ—Å—É—Ä—Å—É" —É –∫—ñ–±–µ—Ä–Ω–µ—Ç–∏—á–Ω–æ–º—É —Ü–∏–∫–ª—ñ).
Reads growth coefficients from environment (.env) with sane defaults (–ó—á–∏—Ç—É—î –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –∑ –æ—Ç–æ—á–µ–Ω–Ω—è (.env) –∑ —Ç–∏–ø–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏).
"""

import copy
import os
from typing import Dict, Tuple

from dotenv import load_dotenv
from app.models import SystemState, ResourceType


# Load environment variables (–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è)
load_dotenv()


def _get_int_env(name: str, default: int) -> int:
    """Get integer environment variable with default (–û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–ª–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è –∑ —Ç–∏–ø–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º)."""
    try:
        return int(os.getenv(name, default))
    except (TypeError, ValueError):
        return default


# Ecology / Recycling rule coefficients (–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ –ï–∫–æ–ª–æ–≥—ñ—ó / –ü–µ—Ä–µ—Ä–æ–±–∫–∏)
ECO_TECH = _get_int_env("RULE_ECO_TECH", 20)
ECO_EDU = _get_int_env("RULE_ECO_EDU", 15)
ECO_RISK = _get_int_env("RULE_ECO_RISK", 10)

# Customer / Service focus coefficients (–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ –ö–ª—ñ—î–Ω—Ç/–°–µ—Ä–≤—ñ—Å)
CUST_COMM = _get_int_env("RULE_CUSTOMER_COMM", 15)
CUST_INFO = _get_int_env("RULE_CUSTOMER_INFO", 10)
CUST_OPER = _get_int_env("RULE_CUSTOMER_OPER", 10)

# Innovation / Digital transformation coefficients (–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –Ü–Ω–Ω–æ–≤–∞—Ü—ñ–π / –¶–¢)
INNOV_TECH = _get_int_env("RULE_INNOV_TECH", 25)
INNOV_STRAT = _get_int_env("RULE_INNOV_STRAT", 15)
INNOV_FIN = _get_int_env("RULE_INNOV_FIN", 10)

# Partnerships / Ecosystem coefficients (–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤ / –ï–∫–æ—Å–∏—Å—Ç–µ–º–∏)
PARTNER_ORG = _get_int_env("RULE_PARTNERS_ORG", 20)
PARTNER_COMM = _get_int_env("RULE_PARTNERS_COMM", 10)

# Risk management / Compliance coefficients (–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–∏–∑–∏–∫–∞–º–∏ / –ö–æ–º–ø–ª–∞—î–Ω—Å—É)
RISK_RISK = _get_int_env("RULE_RISK_RISK", 20)
RISK_OPER = _get_int_env("RULE_RISK_OPER", 10)

# Educational / Knowledge coefficients (–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ –¥–ª—è –û—Å–≤—ñ—Ç–∏ / –ó–Ω–∞–Ω—å)
EDU_EDU = _get_int_env("RULE_EDU_EDU", 20)
EDU_ORG = _get_int_env("RULE_EDU_ORG", 10)

# Default rule coefficients (–¢–∏–ø–æ–≤—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏)
DEF_TECH = _get_int_env("RULE_DEFAULT_TECH", 5)
DEF_STRAT = _get_int_env("RULE_DEFAULT_STRAT", 5)
DEF_FIN = _get_int_env("RULE_DEFAULT_FIN", 5)


def run_mock_analysis(goal: str, current_state: SystemState) -> Tuple[SystemState, Dict[str, int]]:
    """
    Simulate AI agent analysis based on the manager's goal (–°–∏–º—É–ª—é–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑ –ê–Ü-–∞–≥–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ü—ñ–ª—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞).

    Args:
        goal: Strategic goal text from the manager (–¢–µ–∫—Å—Ç —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ—ó —Ü—ñ–ª—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
        current_state: Current system state (–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–∏)

    Returns:
        Tuple of (new_state, deltas_by_resource_type) where deltas map resource type label to delta
        (–ö–æ—Ä—Ç–µ–∂ (–Ω–æ–≤–∏–π_—Å—Ç–∞–Ω, –¥–µ–ª—å—Ç–∏_–∑–∞_—Ç–∏–ø–æ–º_—Ä–µ—Å—É—Ä—Å—É), –¥–µ –¥–µ–ª—å—Ç–∏ ‚Äî –º–∞–ø–∞ —Ç–∏–ø—É —Ä–µ—Å—É—Ä—Å—É –¥–æ –∑–º—ñ–Ω–∏)
    """
    new_state = copy.deepcopy(current_state)
    deltas_by_type: Dict[ResourceType, int] = {}

    print(f"\n{'='*60}")
    print(f"ü§ñ AI –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª—ñ–∑—É—î —Ü—ñ–ª—å: '{goal}'")
    print(f"{'='*60}")

    goal_lower = goal.lower()

    def apply_deltas(local_deltas: Dict[ResourceType, int], message: str) -> None:
        """Apply resource deltas and log message (–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –¥–µ–ª—å—Ç–∏ —Ä–µ—Å—É—Ä—Å—ñ–≤ —ñ –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)."""
        nonlocal deltas_by_type
        deltas_by_type = local_deltas
        print(message)
        for r_type, delta in local_deltas.items():
            for resource in new_state.resources:
                if resource.type == r_type:
                    resource.value = min(100, resource.value + delta)
        human_readable = "; ".join(
            f"{r_type.value} (+{delta})" for r_type, delta in local_deltas.items()
        )
        print(f"‚úÖ Updated resources: {human_readable}")

    if "–ø–µ—Ä–µ—Ä–æ–±–∫" in goal_lower or "–µ–∫–æ–ª–æ–≥—ñ" in goal_lower or "circular" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –ü–µ—Ä–µ—Ä–æ–±–∫–∞, –ï–∫–æ–ª–æ–≥—ñ—è")
        apply_deltas(
            {
                ResourceType.TECHNOLOGICAL: ECO_TECH,
                ResourceType.EDUCATIONAL: ECO_EDU,
                ResourceType.RISK: ECO_RISK,
            },
            "üí° Recommendation: Increase Technological, Educational, Risk resources (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π, –û—Å–≤—ñ—Ç–Ω—ñ–π, –†–∏–∑–∏–∫–æ–≤–∏–π —Ä–µ—Å—É—Ä—Å–∏)",
        )
    elif "–∫–ª—ñ—î–Ω—Ç" in goal_lower or "—Å–µ—Ä–≤—ñ—Å" in goal_lower or "–∫–ª—ñ—î–Ω—Ç—Å—å–∫" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –ö–ª—ñ—î–Ω—Ç, –°–µ—Ä–≤—ñ—Å")
        apply_deltas(
            {
                ResourceType.COMMUNICATION: CUST_COMM,
                ResourceType.INFORMATIONAL: CUST_INFO,
                ResourceType.OPERATIONAL: CUST_OPER,
            },
            "üí° Recommendation: Increase Communication, Informational, Operational resources (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π, –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π, –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏)",
        )
    elif "—ñ–Ω–Ω–æ–≤–∞—Ü" in goal_lower or "—Ü–∏—Ñ—Ä–æ–≤" in goal_lower or "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –Ü–Ω–Ω–æ–≤–∞—Ü—ñ—è, –¶–∏—Ñ—Ä–æ–≤–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        apply_deltas(
            {
                ResourceType.TECHNOLOGICAL: INNOV_TECH,
                ResourceType.STRATEGIC: INNOV_STRAT,
                ResourceType.FINANCIAL: INNOV_FIN,
            },
            "üí° Recommendation: Increase Technological, Strategic, Financial resources (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π, –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∏–π, –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ä–µ—Å—É—Ä—Å–∏)",
        )
    elif "–ø–∞—Ä—Ç–Ω–µ—Ä" in goal_lower or "–µ–∫–æ—Å–∏—Å—Ç–µ–º" in goal_lower or "—Å–ø—ñ–≤–ø—Ä–∞—Ü" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ, –ï–∫–æ—Å–∏—Å—Ç–µ–º–∞")
        apply_deltas(
            {
                ResourceType.ORGANIZATIONAL: PARTNER_ORG,
                ResourceType.COMMUNICATION: PARTNER_COMM,
            },
            "üí° Recommendation: Increase Organizational, Communication resources (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π, –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏)",
        )
    elif "—Ä–∏–∑–∏–∫" in goal_lower or "–±–µ–∑–ø–µ–∫–∞" in goal_lower or "–∫–æ–º–ø–ª–∞—î–Ω—Å" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –†–∏–∑–∏–∫–∏, –ë–µ–∑–ø–µ–∫–∞")
        apply_deltas(
            {
                ResourceType.RISK: RISK_RISK,
                ResourceType.OPERATIONAL: RISK_OPER,
            },
            "üí° Recommendation: Increase Risk and Operational resources (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –†–∏–∑–∏–∫–æ–≤–∏–π —Ç–∞ –û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏)",
        )
    elif "–æ—Å–≤—è—Ç" in goal_lower or "—Ç—Ä–µ–Ω" in goal_lower or "–∑–Ω–∞–Ω–Ω" in goal_lower or "–Ω–∞–≤—á–∞–Ω" in goal_lower:
        print("üìä –í–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: –û—Å–≤—ñ—Ç–∞, –¢—Ä–µ–Ω—ñ–Ω–≥–∏")
        apply_deltas(
            {
                ResourceType.EDUCATIONAL: EDU_EDU,
                ResourceType.ORGANIZATIONAL: EDU_ORG,
            },
            "üí° Recommendation: Increase Educational and Organizational resources (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–±—ñ–ª—å—à–∏—Ç–∏ –û—Å–≤—ñ—Ç–Ω—ñ–π —Ç–∞ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–∏–π —Ä–µ—Å—É—Ä—Å–∏)",
        )
    else:
        print("üìä –¶—ñ–ª—å –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —á—ñ—Ç–∫–æ - –∑–∞—Å—Ç–æ—Å–æ–≤—É—é –±–∞–∑–æ–≤—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è")
        apply_deltas(
            {
                ResourceType.TECHNOLOGICAL: DEF_TECH,
                ResourceType.STRATEGIC: DEF_STRAT,
                ResourceType.FINANCIAL: DEF_FIN,
            },
            "üí° Recommendation: Even improvement of core resources (–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–µ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤)",
        )

    print(f"{'='*60}\n")

    deltas_serialized: Dict[str, int] = {r_type.value: delta for r_type, delta in deltas_by_type.items()}
    return new_state, deltas_serialized



